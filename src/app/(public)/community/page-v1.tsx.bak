"use client";

import React, { useState, useEffect } from "react";
import { useSession } from "next-auth/react";
import { useSearchParams, useRouter } from "next/navigation";
import { Plus, Loader2, TrendingUp, Users, Hash } from "lucide-react";
import { Button } from "@/components/ui/button";
import { FeedItem, type FeedItemData } from "@/components/community/FeedItem";
import { CreatePostModal } from "@/components/community/CreatePostModal";
import { useToast } from "@/hooks/use-toast";

type Tab = "hot" | "following" | "topic";

export default function CommunityPage() {
  const { data: session } = useSession();
  const router = useRouter();
  const searchParams = useSearchParams();
  const { toast } = useToast();

  const [activeTab, setActiveTab] = useState<Tab>("hot");
  const [feedItems, setFeedItems] = useState<FeedItemData[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isLoadingMore, setIsLoadingMore] = useState(false);
  const [page, setPage] = useState(1);
  const [hasMore, setHasMore] = useState(true);
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const [topic, setTopic] = useState<string | null>(null);

  useEffect(() => {
    const tabParam = searchParams.get("tab") as Tab;
    const topicParam = searchParams.get("topic");

    if (tabParam && ["hot", "following", "topic"].includes(tabParam)) {
      setActiveTab(tabParam);
    }

    if (topicParam) {
      setTopic(topicParam);
      setActiveTab("topic");
    }
  }, [searchParams]);

  const fetchFeed = async (pageNum: number = 1, append: boolean = false) => {
    try {
      if (pageNum === 1) {
        setIsLoading(true);
      } else {
        setIsLoadingMore(true);
      }

      const params = new URLSearchParams({
        page: pageNum.toString(),
        limit: "20",
        tab: activeTab,
      });

      if (activeTab === "topic" && topic) {
        params.append("topic", topic);
      }

      const response = await fetch(`/api/feed?${params.toString()}`);
      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || "Failed to fetch feed");
      }

      if (append) {
        setFeedItems((prev) => [...prev, ...data.feedItems]);
      } else {
        setFeedItems(data.feedItems);
      }

      setHasMore(data.pagination.hasMore);
      setPage(pageNum);
    } catch (error: any) {
      console.error("Error fetching feed:", error);
      toast({
        title: "Error",
        description: error.message || "Failed to load feed",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
      setIsLoadingMore(false);
    }
  };

  useEffect(() => {
    setFeedItems([]);
    setPage(1);
    setHasMore(true);
    fetchFeed(1, false);
  }, [activeTab, topic]);

  const handleTabChange = (tab: Tab) => {
    setActiveTab(tab);
    const params = new URLSearchParams();
    params.set("tab", tab);
    if (tab === "topic" && topic) {
      params.set("topic", topic);
    }
    router.push(`/community?${params.toString()}`);
  };

  const handleLike = async (itemId: string, type: "POST" | "REFLECTION") => {
    if (!session) {
      toast({
        title: "Sign in required",
        description: "Please sign in to like content",
        variant: "destructive",
      });
      return;
    }

    try {
      const endpoint =
        type === "POST"
          ? `/api/posts/${itemId}/like`
          : `/api/reflections/${itemId}/like`;
      const response = await fetch(endpoint, { method: "POST" });
      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || "Failed to like");
      }

      setFeedItems((prev) =>
        prev.map((item) => {
          if (type === "POST" && item.post?.id === itemId) {
            return {
              ...item,
              hasLiked: data.liked,
              post: {
                ...item.post!,
                likeCount: data.likeCount,
              },
            };
          }
          if (type === "REFLECTION" && item.reflection?.id === itemId) {
            return {
              ...item,
              hasLiked: data.liked,
              reflection: {
                ...item.reflection!,
                likeCount: data.likeCount,
              },
            };
          }
          return item;
        })
      );
    } catch (error: any) {
      console.error("Error liking:", error);
      toast({
        title: "Error",
        description: error.message || "Failed to like",
        variant: "destructive",
      });
    }
  };

  const handleComment = (itemId: string, type: "POST" | "REFLECTION") => {
    const item = feedItems.find((i) =>
      type === "POST" ? i.post?.id === itemId : i.reflection?.id === itemId
    );

    if (item) {
      const url =
        type === "POST"
          ? `/posts/${item.post!.slug}`
          : `/reflections/${itemId}`;
      router.push(url);
    }
  };

  const handleSave = async (itemId: string, type: "POST" | "REFLECTION") => {
    toast({
      title: "Coming Soon",
      description: "Collections feature is coming soon!",
    });
  };

  const handleShare = async (itemId: string, type: "POST" | "REFLECTION") => {
    const item = feedItems.find((i) =>
      type === "POST" ? i.post?.id === itemId : i.reflection?.id === itemId
    );

    if (item) {
      const url =
        type === "POST"
          ? `${window.location.origin}/posts/${item.post!.slug}`
          : `${window.location.origin}/reflections/${itemId}`;

      try {
        await navigator.clipboard.writeText(url);
        toast({
          title: "Link copied!",
          description: "Share link copied to clipboard",
        });
      } catch (error) {
        toast({
          title: "Error",
          description: "Failed to copy link",
          variant: "destructive",
        });
      }
    }
  };

  const handleLoadMore = () => {
    if (!isLoadingMore && hasMore) {
      fetchFeed(page + 1, true);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-950 via-purple-950/20 to-slate-950 relative overflow-hidden">
      {/* Animated Background Orbs */}
      <div className="fixed inset-0 overflow-hidden pointer-events-none">
        <div className="absolute top-0 right-0 w-[600px] h-[600px] bg-purple-600/10 rounded-full blur-3xl animate-pulse" />
        <div
          className="absolute bottom-0 left-0 w-[600px] h-[600px] bg-emerald-600/10 rounded-full blur-3xl animate-pulse"
          style={{ animationDelay: "1s" }}
        />
        <div
          className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-[800px] h-[800px] bg-blue-600/5 rounded-full blur-3xl animate-pulse"
          style={{ animationDelay: "2s" }}
        />
      </div>

      {/* Header */}
      <div className="sticky top-0 z-50 border-b border-purple-500/20 bg-slate-900/80 backdrop-blur-xl shadow-lg shadow-purple-500/10">
        <div className="container mx-auto px-4 py-6">
          <div className="flex items-center justify-between mb-6">
            <div>
              <h1 className="text-5xl font-black text-transparent bg-clip-text bg-gradient-to-r from-white via-purple-200 to-emerald-200 mb-2">
                Dynasty Community 🌟
              </h1>
              <p className="text-gray-400">Connect, Share, and Grow Together</p>
            </div>
            {session && (
              <Button
                onClick={() => setIsCreateModalOpen(true)}
                className="bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white font-semibold px-6 py-3 rounded-xl shadow-lg shadow-purple-500/30 hover:shadow-purple-500/50 transition-all hover:scale-105"
              >
                <Plus className="mr-2 h-5 w-5" />
                Create Post
              </Button>
            )}
          </div>

          {/* Tabs */}
          <div className="flex gap-3">
            <button
              onClick={() => handleTabChange("hot")}
              className={`px-6 py-3 rounded-xl font-semibold transition-all duration-300 flex items-center gap-2 ${
                activeTab === "hot"
                  ? "bg-gradient-to-r from-orange-500 to-pink-500 text-white shadow-lg shadow-orange-500/30"
                  : "bg-slate-800/50 text-gray-400 hover:bg-slate-800 hover:text-white border border-slate-700"
              }`}
            >
              <TrendingUp className="h-5 w-5" />
              🔥 Hot
            </button>
            <button
              onClick={() => handleTabChange("following")}
              disabled={!session}
              className={`px-6 py-3 rounded-xl font-semibold transition-all duration-300 flex items-center gap-2 ${
                activeTab === "following"
                  ? "bg-gradient-to-r from-purple-500 to-blue-500 text-white shadow-lg shadow-purple-500/30"
                  : "bg-slate-800/50 text-gray-400 hover:bg-slate-800 hover:text-white border border-slate-700 disabled:opacity-50 disabled:cursor-not-allowed"
              }`}
            >
              <Users className="h-5 w-5" />
              Following
            </button>
            {topic && activeTab === "topic" && (
              <button className="px-6 py-3 rounded-xl font-semibold bg-gradient-to-r from-emerald-500 to-teal-500 text-white shadow-lg shadow-emerald-500/30 flex items-center gap-2">
                <Hash className="h-5 w-5" />
                {topic}
              </button>
            )}
          </div>
        </div>
      </div>

      {/* Content */}
      <div className="container mx-auto px-4 py-12 relative z-10">
        {isLoading ? (
          <div className="flex flex-col justify-center items-center py-20">
            <div className="relative">
              <Loader2 className="h-16 w-16 animate-spin text-purple-500" />
              <div className="absolute inset-0 blur-xl bg-purple-500/30 animate-pulse" />
            </div>
            <p className="mt-6 text-gray-400 text-lg">
              Loading amazing content...
            </p>
          </div>
        ) : feedItems.length === 0 ? (
          <div className="text-center py-20">
            <div className="inline-flex items-center justify-center w-24 h-24 rounded-full bg-gradient-to-br from-purple-500/20 to-blue-500/20 border border-purple-500/30 mb-6">
              <span className="text-6xl">💬</span>
            </div>
            <h3 className="text-3xl font-bold text-white mb-4">
              {activeTab === "following"
                ? "Your Feed is Empty"
                : activeTab === "topic"
                ? `No Posts in #${topic}`
                : "Be the First!"}
            </h3>
            <p className="text-gray-400 text-lg mb-8 max-w-md mx-auto">
              {activeTab === "following"
                ? "Start following some amazing people to see their posts here!"
                : activeTab === "topic"
                ? `No one has posted about ${topic} yet. Be the pioneer!`
                : "No posts yet. Share your thoughts and start the conversation!"}
            </p>
            {session && (
              <Button
                onClick={() => setIsCreateModalOpen(true)}
                className="bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white font-semibold px-8 py-4 rounded-xl shadow-lg shadow-purple-500/30 hover:shadow-purple-500/50 transition-all hover:scale-105 text-lg"
              >
                <Plus className="mr-2 h-6 w-6" />
                Create First Post
              </Button>
            )}
          </div>
        ) : (
          <div className="max-w-4xl mx-auto space-y-6">
            {feedItems.map((item, index) => (
              <div
                key={item.id}
                className="animate-in fade-in slide-in-from-bottom-4 duration-500"
                style={{ animationDelay: `${index * 50}ms` }}
              >
                <FeedItem
                  item={item}
                  onLike={handleLike}
                  onComment={handleComment}
                  onSave={handleSave}
                  onShare={handleShare}
                  currentUserId={session?.user?.id}
                />
              </div>
            ))}

            {hasMore && (
              <div className="flex justify-center py-12">
                <Button
                  onClick={handleLoadMore}
                  disabled={isLoadingMore}
                  className="bg-gradient-to-r from-slate-800 to-slate-700 hover:from-slate-700 hover:to-slate-600 text-white font-semibold px-8 py-4 rounded-xl border border-slate-600 shadow-lg hover:shadow-xl transition-all hover:scale-105 disabled:opacity-50 disabled:hover:scale-100"
                >
                  {isLoadingMore ? (
                    <>
                      <Loader2 className="mr-2 h-5 w-5 animate-spin" />
                      Loading More...
                    </>
                  ) : (
                    <>
                      <TrendingUp className="mr-2 h-5 w-5" />
                      Load More Posts
                    </>
                  )}
                </Button>
              </div>
            )}
          </div>
        )}
      </div>

      <CreatePostModal
        open={isCreateModalOpen}
        onOpenChange={setIsCreateModalOpen}
        onSuccess={() => {
          setFeedItems([]);
          setPage(1);
          fetchFeed(1, false);
        }}
      />
    </div>
  );
}
