// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// MARKETPLACE SAFE MODE SCHEMA
// Non-custodial ledger system for Dynasty Academy

// ============================================
// DOUBLE-ENTRY LEDGER SYSTEM
// ============================================

// Account: A container for balance tracking
// Follows accounting principles: every debit needs a credit
model Account {
  id         String   @id @default(cuid())
  userId     String?  // null for platform accounts
  type       String   // "platform" | "instructor" | "student"
  currency   String   @default("USD") // One currency per account
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, type, currency])
  @@index([userId, type, currency])
  @@map("accounts")
}

// Entry: Individual debit/credit in the ledger
// amountCents: positive = credit (increase), negative = debit (decrease)
model Entry {
  id          String   @id @default(cuid())
  accountId   String   // Which account this entry affects
  amountCents Int      // Signed integer: +500 = $5 credit, -500 = $5 debit
  refType     String   // "purchase" | "refund" | "payout" | "adjustment" | "platform_fee"
  refId       String   // Foreign key to business object (orderId, payoutId, etc)
  idempotency String   // Unique key: prevents duplicate processing
  metadata    Json?    // Additional context
  createdAt   DateTime @default(now())

  @@unique([idempotency])
  @@index([accountId])
  @@index([refType, refId])
  @@map("entries")
}

// Transfer: Atomic movement between two accounts
// Always creates 2 entries: debit from source, credit to destination
model Transfer {
  id          String   @id @default(cuid())
  fromAccount String   // Account being debited
  toAccount   String   // Account being credited
  amountCents Int      // Always positive
  refType     String   // Same as Entry refType
  refId       String   // Same as Entry refId
  idempotency String   // Must match Entry idempotency
  metadata    Json?
  createdAt   DateTime @default(now())

  @@unique([idempotency])
  @@index([fromAccount])
  @@index([toAccount])
  @@index([refType, refId])
  @@map("transfers")
}

// ============================================
// PRODUCT CATALOG
// ============================================

model Product {
  id           String   @id @default(cuid())
  type         String   // "course" | "pdf" | "audio" | "workshop" | "subscription" | "bundle" | "download"
  title        String
  description  String   @db.Text
  slug         String   @unique
  instructorId String
  status       String   @default("active") // "active" | "archived" | "pending"
  
  // JSON fields for flexibility
  pricingJson  Json     // { model: "one_time", prices: [{amount: 4999, label: "Standard"}], currency: "USD" }
  contentJson  Json     // { fileUrl, duration, format, previewUrl, version }
  statsJson    Json?    // { totalSales, revenue, rating, reviewCount, views }
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([instructorId, type, status])
  @@index([slug])
  @@map("products")
}

// Ownership: User's access to products
// Idempotent: unique constraint prevents duplicate ownership
model Ownership {
  id         String   @id @default(cuid())
  userId     String
  productId  String
  source     String   // "purchase" | "subscription" | "grant" | "bundle" | "revoked"
  grantedAt  DateTime @default(now())
  revokedAt  DateTime? // Set when refunded
  metadata   Json?    // { orderId, subscriptionId, etc }

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
  @@map("ownerships")
}

// ============================================
// STRIPE INTEGRATION
// ============================================

// StripeConnect: Instructor payout accounts
model StripeConnect {
  id                String   @id @default(cuid())
  userId            String   @unique // Instructor
  stripeAccountId   String   @unique
  onboardingComplete Boolean @default(false)
  payoutsEnabled    Boolean @default(false)
  country           String?
  currency          String?
  metadata          Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId])
  @@index([stripeAccountId])
  @@map("stripe_connect")
}

// StripeEvent: Webhook event tracking
// Prevents duplicate processing via idempotency
model StripeEvent {
  id         String   @id // Stripe event ID
  type       String   // "checkout.session.completed", etc
  processed  Boolean  @default(false)
  data       Json     // Full event payload
  createdAt  DateTime @default(now())
  processedAt DateTime?

  @@index([type, processed])
  @@map("stripe_events")
}

// ============================================
// PAYOUTS
// ============================================

model Payout {
  id              String   @id @default(cuid())
  instructorId    String
  amountCents     Int      // Amount requested
  currency        String   @default("USD")
  status          String   @default("pending") // "pending" | "processing" | "completed" | "failed"
  stripePayoutId  String?  // Stripe payout ID when processed
  failureReason   String?
  requestedAt     DateTime @default(now())
  processedAt     DateTime?
  metadata        Json?

  @@index([instructorId, status])
  @@map("payouts")
}
