generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String               @id @default(cuid())
  name                   String?
  email                  String               @unique
  emailVerified          DateTime?
  image                  String?
  password               String?
  role                   Role                 @default(USER)
  bio                    String?
  socialLinks            Json?
  isPremium              Boolean              @default(false)
  premiumUntil           DateTime?
  settings               Json?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  lastLoginAt            DateTime?
  banReason              String?
  dynastyScore           Int                  @default(0)
  isBanned               Boolean              @default(false)
  isMentor               Boolean              @default(false)
  isSuspended            Boolean              @default(false)
  lastActiveAt           DateTime?
  level                  Int                  @default(1)
  streakDays             Int                  @default(0)
  xp                     Int                  @default(0)
  suspendedUntil         DateTime?
  username               String?              @unique
  bannerImage            String?
  booksCompleted         Int                  @default(0)
  currentBookId          String?
  currentPage            Int?
  dmOpen                 Boolean              @default(true)
  followersCount         Int                  @default(0)
  followingCount         Int                  @default(0)
  instagram              String?
  isPrivate              Boolean              @default(false)
  location               String?
  profileTheme           String               @default("default")
  readingMinutesLifetime Int                  @default(0)
  reportsCount           Int                  @default(0)
  thanksReceived         Int                  @default(0)
  usernameChangedAt      DateTime?
  website                String?
  xHandle                String?
  youtube                String?
  accounts               Account[]
  blogPosts              BlogPost[]
  bookReflections        BookReflection[]     @relation("BookReflections")
  bookmarks              Bookmark[]
  books                  Book[]
  cartItems              CartItem[]           @relation("CartItems")
  certificates           certificates[]
  collectionItems        CollectionItem[]
  collections            Collection[]         @relation("UserCollections")
  commentLikes           CommentLike[]        @relation("UserCommentLikes")
  comments               Comment[]
  course_enrollments     course_enrollments[]
  course_notes           course_notes[]
  course_reviews         course_reviews[]
  dynastyActivities      DynastyActivity[]    @relation("UserActivities")
  feedItems              FeedItem[]
  following              Follow[]             @relation("Follower")
  followers              Follow[]             @relation("Following")
  forumPostLikes         ForumPostLike[]      @relation("ForumPostLikes")
  forumPosts             ForumPost[]          @relation("ForumPostAuthor")
  forumTopicBookmarks    ForumTopicBookmark[] @relation("ForumTopicBookmarks")
  forumTopicLikes        ForumTopicLike[]     @relation("ForumTopicLikes")
  forumTopics            ForumTopic[]         @relation("ForumTopicAuthor")
  lesson_progress        lesson_progress[]
  likes                  Like[]
  listeningAnalytics     ListeningAnalytics[] @relation("UserListeningAnalytics")
  listeningProgress      ListeningProgress[]  @relation("UserListeningProgress")
  listeningStreak        ListeningStreak?     @relation("UserListeningStreak")
  messageFlags           MessageFlag[]        @relation("UserMessageFlags")
  moderationActions      ModerationLog[]      @relation("ModeratorActions")
  notificationsSent      Notification[]       @relation("NotificationActors")
  notifications          Notification[]       @relation("Recipient")
  orders                 Order[]
  pageChats              PageChat[]           @relation("UserPageChat")
  postComments           PostComment[]        @relation("UserPostComments")
  postLikes              PostLike[]           @relation("UserPostLikes")
  posts                  Post[]               @relation("UserPosts")
  purchases              Purchase[]           @relation("UserPurchases")
  quiz_attempts          quiz_attempts[]
  readingPresence        ReadingPresence[]    @relation("UserReadingPresence")
  reflectionComments     ReflectionComment[]  @relation("UserReflectionComments")
  reflectionLikes        ReflectionLike[]     @relation("UserReflectionLikes")
  reflections            Reflection[]         @relation("UserReflections")
  reportsCreated         Report[]             @relation("UserReports")
  reportsReviewed        Report[]             @relation("ReviewedReports")
  reviews                Review[]
  savedPosts             SavedPost[]          @relation("UserSavedPosts")
  sentenceHighlights     SentenceHighlight[]  @relation("UserSentenceHighlights")
  sessions               Session[]
  subscriptions          Subscription[]       @relation("UserSubscriptions")
  userAchievements       UserAchievement[]    @relation("UserAchievements")
  progress               UserProgress[]
  userQuests             UserQuest[]
  // üéÆ Duel Relations
  challengedDuels        Duel[]               @relation("ChallengerDuels")
  opponentDuels          Duel[]               @relation("OpponentDuels")
  wonDuels               Duel[]               @relation("WonDuels")
  duelStats              DuelStats?           @relation("UserDuelStats")
  // ü§ñ AI Coach Relations
  aiConversations        AiConversation[]     @relation("UserAiConversations")
  // üéôÔ∏è Community Narrator Relations
  communityNarrations    CommunityNarration[] @relation("UserNarrations")
  narrationLikes         NarrationLike[]      @relation("UserNarrationLikes")
  narrationPlays         NarrationPlay[]      @relation("UserNarrationPlays")
  narrationFlags         NarrationFlag[]      @relation("UserNarrationFlags")
  // üéØ Engagement System Relations
  engagementScore        EngagementScore?     @relation("UserEngagementScore")
  streak                 Streak?              @relation("UserStreak")
  personalization        PersonalizationProfile? @relation("UserPersonalization")
  behaviorEvents         BehaviorEvent[]      @relation("UserBehaviorEvents")
  interventionTracking   InterventionTracking[] @relation("UserInterventions")
  // üí∞ Revenue Maximizer Relations
  churnRisk              ChurnRisk?           @relation("UserChurnRisk")
  winBackOffers          WinBackOffer[]       @relation("UserWinBackOffers")
  userLTV                UserLTV?             @relation("UserLTV")

  @@index([email])
  @@index([role])
  @@index([username])
  @@index([dynastyScore])
  @@index([level])
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Book {
  id                 String               @id @default(cuid())
  title              String
  slug               String               @unique
  description        String
  excerpt            String?
  coverImage         String?
  price              Float
  salePrice          Float?
  category           String
  tags               String[]
  contentType        String
  fileUrl            String?
  previewUrl         String?
  pages              Int?
  duration           String?
  totalPages         Int?                 @map("total_pages")
  previewPages       Int?                 @map("preview_pages")
  authorId           String
  publishedAt        DateTime?
  featured           Boolean              @default(false)
  viewCount          Int                  @default(0)
  salesCount         Int                  @default(0)
  rating             Float                @default(0)
  reviewCount        Int                  @default(0)
  metaTitle          String?
  metaDescription    String?
  // üöÄ NEW: Book Import System Fields
  bookType           String               @default("premium") // premium, free, public
  source             String               @default("manual") // manual, gutenberg, openlibrary, google
  externalId         String?              // External API ID for deduplication
  externalData       Json?                // Store original API data
  language           String               @default("en")
  isbn               String?
  publisher          String?
  publicationYear    Int?
  // üîÆ NEW: Advanced SEO Fields
  seoTitle           String?              // AI-optimized title
  seoDescription     String?              @db.Text // AI-optimized description
  seoKeywords        String?              // Comma-separated keywords
  seoOgImage         String?              // Dynamic OG image URL
  seoSchemaJson      String?              @db.Text // JSON-LD structured data
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  audioAssets        AudioAsset[]
  bookReflections    BookReflection[]     @relation("BookReflections")
  bookmarks          Bookmark[]
  author             User                 @relation(fields: [authorId], references: [id])
  cartItems          CartItem[]           @relation("CartItems")
  coReadingAnalytics CoReadingAnalytics[] @relation("BookCoReadingAnalytics")
  listeningAnalytics ListeningAnalytics[] @relation("BookListeningAnalytics")
  listeningProgress  ListeningProgress[]  @relation("BookListeningProgress")
  orders             OrderItem[]
  pageChats          PageChat[]           @relation("BookPageChat")
  pageReactions      PageReaction[]       @relation("BookPageReaction")
  purchases          Purchase[]           @relation("BookPurchases")
  readingPresence    ReadingPresence[]    @relation("BookReadingPresence")
  reflections        Reflection[]
  reviews            Review[]
  sentenceHighlights SentenceHighlight[]  @relation("BookSentenceHighlights")
  progress           UserProgress[]
  duels              Duel[]               // üéÆ Knowledge battles for this book
  communityNarrations CommunityNarration[] @relation("BookNarrations") // üéôÔ∏è Community narrations
  bookPermissions    BookPermission?      @relation("BookPermissions") // üéôÔ∏è Narration permissions
  bookContents       BookContent[]        @relation("BookContents") // üìÑ Extracted PDF content

  @@index([slug])
  @@index([category])
  @@index([featured])
  @@index([publishedAt])
  @@index([bookType])
  @@index([source])
  @@index([externalId])
  @@map("books")
}

// üìö Book Content Storage for Imported Books
model BookContent {
  id          String   @id @default(cuid())
  bookId      String
  pageNumber  Int      // Page number in the book
  content     String   @db.Text // Actual text content of the page
  wordCount   Int      @default(0) // Words on this page
  charCount   Int      @default(0) // Characters on this page
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  book        Book     @relation("BookContents", fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([bookId, pageNumber]) // One content entry per page per book
  @@index([bookId])
  @@map("book_contents")
}

model BlogPost {
  id              String     @id @default(cuid())
  title           String
  slug            String     @unique
  content         String
  excerpt         String?
  coverImage      String?
  category        String
  tags            String[]
  authorId        String
  publishedAt     DateTime?
  featured        Boolean    @default(false)
  viewCount       Int        @default(0)
  readTime        String?
  metaTitle       String?
  metaDescription String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  author          User       @relation(fields: [authorId], references: [id])
  bookmarks       Bookmark[]
  comments        Comment[]
  likes           Like[]

  @@index([slug])
  @@index([category])
  @@index([publishedAt])
  @@map("blog_posts")
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  bookId    String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  book      Book     @relation("CartItems", fields: [bookId], references: [id], onDelete: Cascade)
  user      User     @relation("CartItems", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
  @@index([userId])
  @@map("cart_items")
}

model Order {
  id            String      @id @default(cuid())
  orderNumber   String      @unique
  userId        String
  subtotal      Float
  tax           Float       @default(0)
  discount      Float       @default(0)
  total         Float
  status        OrderStatus @default(PENDING)
  paymentId     String?
  paymentMethod String?
  email         String
  downloadLinks Json?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  items         OrderItem[]
  user          User        @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  bookId    String
  quantity  Int      @default(1)
  price     Float
  createdAt DateTime @default(now())
  book      Book     @relation(fields: [bookId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Purchase {
  id              String   @id @default(cuid())
  userId          String   @map("user_id")
  bookId          String   @map("book_id")
  amount          Float
  status          String   @default("completed")
  paymentProvider String   @default("stripe") @map("payment_provider")
  paymentIntentId String?  @map("payment_intent_id")
  metadata        Json?
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  book            Book     @relation("BookPurchases", fields: [bookId], references: [id])
  user            User     @relation("UserPurchases", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
  @@index([userId])
  @@index([bookId])
  @@index([status])
  @@map("purchases")
}

model Subscription {
  id                   String    @id @default(cuid())
  userId               String    @map("user_id")
  planId               String    @map("plan_id")
  status               String    @default("active")
  stripeSubscriptionId String?   @unique @map("stripe_subscription_id")
  stripeCustomerId     String?   @map("stripe_customer_id")
  currentPeriodEnd     DateTime  @map("current_period_end")
  canceledAt           DateTime? @map("canceled_at")
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")
  user                 User      @relation("UserSubscriptions", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@map("subscriptions")
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  userId    String
  postId    String
  parentId  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  post      BlogPost  @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([userId])
  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([postId])
  @@map("likes")
}

model Bookmark {
  id        String    @id @default(cuid())
  userId    String
  bookId    String?
  postId    String?
  createdAt DateTime  @default(now())
  book      Book?     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  post      BlogPost? @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("bookmarks")
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@map("follows")
}

model Notification {
  id         String           @id @default(cuid())
  userId     String
  type       NotificationType
  title      String
  message    String?
  link       String?
  createdAt  DateTime         @default(now())
  actorId    String?
  entityId   String?
  entityType String?
  seen       Boolean          @default(false)
  actor      User?            @relation("NotificationActors", fields: [actorId], references: [id])
  user       User             @relation("Recipient", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([seen])
  @@index([createdAt])
  @@map("notifications")
}

model UserProgress {
  id               String   @id @default(cuid())
  userId           String
  bookId           String
  progress         Float    @default(0)
  lastPage         Int?
  completed        Boolean  @default(false)
  reflectionsCount Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  book             Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
  @@index([userId])
  @@map("user_progress")
}

model AudioAsset {
  id            String   @id @default(cuid())
  bookId        String   @map("book_id")
  chapterNumber Int      @map("chapter_number")
  audioUrl      String?  @map("audio_url")
  duration      String?
  metadata      Json?
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  // üî• REVOLUTIONARY SMART CACHING FIELDS
  contentHash   String?  @map("content_hash") // SHA-256 hash for deduplication
  voiceId       String?  @map("voice_id") // Voice used for generation
  storageUrl    String?  @map("storage_url") // Permanent storage location
  durationSec   Float?   @map("duration_sec") // Duration in seconds
  wordCount     Int?     @map("word_count") // Word count for cost calculation
  format        String?  @default("mp3_44100_128") // Audio format
  accessCount   Int      @default(0) @map("access_count") // Track usage
  book          Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([bookId, chapterNumber])
  @@index([bookId])
  @@index([contentHash]) // Critical for cache performance
  @@map("book_audio")
}

model AudioUsageLog {
  id             String   @id @default(cuid())
  userId         String   @map("user_id")
  bookId         String   @map("book_id")
  type           String
  savedAmount    Float    @default(0) @map("saved_amount")
  generationCost Float    @default(0) @map("generation_cost")
  timestamp      DateTime @default(now())
  metadata       Json?

  @@index([userId])
  @@index([bookId])
  @@index([timestamp])
  @@map("audio_usage_log")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  userId    String
  bookId    String
  helpful   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
  @@index([bookId])
  @@map("reviews")
}

model ForumCategory {
  id          String       @id @default(cuid())
  name        String       @unique
  slug        String       @unique
  description String?
  icon        String?
  color       String?
  order       Int          @default(0)
  isActive    Boolean      @default(true) @map("is_active")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  topics      ForumTopic[]

  @@index([slug])
  @@map("forum_categories")
}

model ForumTopic {
  id             String               @id @default(cuid())
  title          String
  slug           String               @unique
  content        String
  isPinned       Boolean              @default(false) @map("is_pinned")
  isLocked       Boolean              @default(false) @map("is_locked")
  viewCount      Int                  @default(0) @map("view_count")
  authorId       String               @map("author_id")
  categoryId     String               @map("category_id")
  createdAt      DateTime             @default(now()) @map("created_at")
  updatedAt      DateTime             @updatedAt @map("updated_at")
  reflectionPost BookReflection?      @relation("ReflectionPost")
  posts          ForumPost[]
  bookmarks      ForumTopicBookmark[]
  likes          ForumTopicLike[]
  author         User                 @relation("ForumTopicAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  category       ForumCategory        @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([slug])
  @@index([categoryId])
  @@index([authorId])
  @@map("forum_topics")
}

model ForumPost {
  id        String          @id @default(cuid())
  content   String
  isAnswer  Boolean         @default(false) @map("is_answer")
  authorId  String          @map("author_id")
  topicId   String          @map("topic_id")
  parentId  String?         @map("parent_id")
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime        @updatedAt @map("updated_at")
  likes     ForumPostLike[]
  author    User            @relation("ForumPostAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  parent    ForumPost?      @relation("ForumPostReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   ForumPost[]     @relation("ForumPostReplies")
  topic     ForumTopic      @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@index([topicId])
  @@index([authorId])
  @@index([parentId])
  @@map("forum_posts")
}

model ForumTopicLike {
  id        String     @id @default(cuid())
  userId    String     @map("user_id")
  topicId   String     @map("topic_id")
  createdAt DateTime   @default(now()) @map("created_at")
  topic     ForumTopic @relation(fields: [topicId], references: [id], onDelete: Cascade)
  user      User       @relation("ForumTopicLikes", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, topicId])
  @@index([topicId])
  @@map("forum_topic_likes")
}

model ForumPostLike {
  id        String    @id @default(cuid())
  userId    String    @map("user_id")
  postId    String    @map("post_id")
  createdAt DateTime  @default(now()) @map("created_at")
  post      ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User      @relation("ForumPostLikes", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([postId])
  @@map("forum_post_likes")
}

model ForumTopicBookmark {
  id        String     @id @default(cuid())
  userId    String     @map("user_id")
  topicId   String     @map("topic_id")
  createdAt DateTime   @default(now()) @map("created_at")
  topic     ForumTopic @relation(fields: [topicId], references: [id], onDelete: Cascade)
  user      User       @relation("ForumTopicBookmarks", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, topicId])
  @@index([topicId])
  @@map("forum_topic_bookmarks")
}

model BookReflection {
  id              String      @id @default(cuid())
  userId          String      @map("user_id")
  bookId          String      @map("book_id")
  chapterNumber   Int         @default(1) @map("chapter_number")
  content         String
  isPublic        Boolean     @default(true) @map("is_public")
  communityPostId String?     @unique @map("community_post_id")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  book            Book        @relation("BookReflections", fields: [bookId], references: [id], onDelete: Cascade)
  communityPost   ForumTopic? @relation("ReflectionPost", fields: [communityPostId], references: [id])
  user            User        @relation("BookReflections", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([bookId])
  @@index([chapterNumber])
  @@index([createdAt])
  @@map("book_reflections")
}

model Post {
  id           String           @id @default(cuid())
  authorId     String
  title        String
  slug         String           @unique
  content      String
  excerpt      String?
  coverImage   String?
  tags         String[]
  viewCount    Int              @default(0)
  likeCount    Int              @default(0)
  commentCount Int              @default(0)
  saveCount    Int              @default(0)
  hotScore     Float            @default(0)
  published    Boolean          @default(true)
  publishedAt  DateTime         @default(now())
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  collections  CollectionItem[]
  feedItems    FeedItem[]
  comments     PostComment[]
  likes        PostLike[]
  author       User             @relation("UserPosts", fields: [authorId], references: [id], onDelete: Cascade)
  saves        SavedPost[]

  @@index([slug])
  @@index([authorId])
  @@index([hotScore])
  @@index([publishedAt])
  @@map("posts")
}

model Reflection {
  id           String              @id @default(cuid())
  authorId     String
  bookId       String
  bookTitle    String
  pageNumber   Int?
  excerpt      String?
  content      String
  likeCount    Int                 @default(0)
  commentCount Int                 @default(0)
  hotScore     Float               @default(0)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  feedItems    FeedItem[]
  comments     ReflectionComment[]
  likes        ReflectionLike[]
  author       User                @relation("UserReflections", fields: [authorId], references: [id], onDelete: Cascade)
  book         Book                @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@index([bookId])
  @@index([hotScore])
  @@index([createdAt])
  @@map("reflections")
}

model PostComment {
  id        String        @id @default(cuid())
  authorId  String
  postId    String
  parentId  String?
  content   String
  likeCount Int           @default(0)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  likes     CommentLike[]
  author    User          @relation("UserPostComments", fields: [authorId], references: [id], onDelete: Cascade)
  parent    PostComment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   PostComment[] @relation("CommentReplies")
  post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([authorId])
  @@index([parentId])
  @@map("post_comments")
}

model CommentLike {
  id        String      @id @default(cuid())
  userId    String
  commentId String
  createdAt DateTime    @default(now())
  comment   PostComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User        @relation("UserCommentLikes", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@index([commentId])
  @@map("comment_likes")
}

model ReflectionComment {
  id           String              @id @default(cuid())
  authorId     String
  reflectionId String
  parentId     String?
  content      String
  likeCount    Int                 @default(0)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  author       User                @relation("UserReflectionComments", fields: [authorId], references: [id], onDelete: Cascade)
  parent       ReflectionComment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies      ReflectionComment[] @relation("CommentReplies")
  reflection   Reflection          @relation(fields: [reflectionId], references: [id], onDelete: Cascade)

  @@index([reflectionId])
  @@index([authorId])
  @@index([parentId])
  @@map("reflection_comments")
}

model PostLike {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation("UserPostLikes", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([postId])
  @@map("post_likes")
}

model SavedPost {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation("UserSavedPosts", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([postId])
  @@index([userId, createdAt])
  @@map("saved_posts")
}

model ReflectionLike {
  id           String     @id @default(cuid())
  userId       String
  reflectionId String
  createdAt    DateTime   @default(now())
  reflection   Reflection @relation(fields: [reflectionId], references: [id], onDelete: Cascade)
  user         User       @relation("UserReflectionLikes", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, reflectionId])
  @@index([reflectionId])
  @@map("reflection_likes")
}

model FeedItem {
  id           String      @id @default(cuid())
  type         FeedType
  postId       String?
  reflectionId String?
  authorId     String
  publishedAt  DateTime
  hotScore     Float       @default(0)
  tags         String[]
  createdAt    DateTime    @default(now())
  author       User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post         Post?       @relation(fields: [postId], references: [id], onDelete: Cascade)
  reflection   Reflection? @relation(fields: [reflectionId], references: [id], onDelete: Cascade)

  @@index([hotScore])
  @@index([publishedAt])
  @@index([authorId])
  @@index([type])
  @@map("feed_items")
}

model DynastyActivity {
  id         String   @id @default(cuid())
  userId     String
  action     String
  points     Int
  entityType String?
  entityId   String?
  metadata   Json?
  createdAt  DateTime @default(now())
  user       User     @relation("UserActivities", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@index([action])
  @@map("dynasty_activities")
}

model Collection {
  id          String           @id @default(cuid())
  userId      String
  title       String
  slug        String
  description String?
  isPublic    Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  coverImage  String?
  itemCount   Int              @default(0)
  items       CollectionItem[]
  user        User             @relation("UserCollections", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, slug])
  @@index([userId])
  @@index([slug])
  @@index([isPublic])
  @@map("collections")
}

model CollectionItem {
  id           String     @id @default(cuid())
  collectionId String
  userId       String
  entityType   String
  entityId     String
  postId       String?
  addedAt      DateTime   @default(now())
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  post         Post?      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([collectionId])
  @@index([userId])
  @@map("collection_items")
}

model Quest {
  id          String      @id @default(cuid())
  title       String
  description String
  type        QuestType
  requirement Json
  reward      Int
  isActive    Boolean     @default(true)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime    @default(now())
  userQuests  UserQuest[]

  @@index([type])
  @@index([isActive])
  @@map("quests")
}

model UserQuest {
  id          String    @id @default(cuid())
  userId      String
  questId     String
  progress    Int       @default(0)
  completed   Boolean   @default(false)
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  quest       Quest     @relation(fields: [questId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, questId])
  @@index([userId])
  @@index([questId])
  @@map("user_quests")
}

model Report {
  id              String       @id @default(cuid())
  type            ReportType
  reason          ReportReason
  status          ReportStatus @default(PENDING)
  reporterId      String
  targetUserId    String?
  targetPostId    String?
  targetCommentId String?
  description     String?
  reviewedBy      String?
  moderatorNotes  String?
  resolvedAt      DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  reporter        User         @relation("UserReports", fields: [reporterId], references: [id], onDelete: Cascade)
  reviewer        User?        @relation("ReviewedReports", fields: [reviewedBy], references: [id])

  @@index([status])
  @@index([type])
  @@index([reporterId])
  @@index([reviewedBy])
  @@map("reports")
}

model ListeningProgress {
  id            String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId        String
  bookId        String
  chapterNumber Int
  position      Float    @default(0)
  duration      Float    @default(0)
  speed         Float    @default(1.0)
  voiceId       String
  completed     Boolean  @default(false)
  lastListened  DateTime @default(now())
  deviceId      String?
  deviceName    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  book          Book     @relation("BookListeningProgress", fields: [bookId], references: [id], onDelete: Cascade)
  user          User     @relation("UserListeningProgress", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId, chapterNumber])
  @@index([userId])
  @@index([lastListened])
  @@map("listening_progress")
}

model ListeningStreak {
  id             String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId         String   @unique
  currentStreak  Int      @default(0)
  longestStreak  Int      @default(0)
  lastListenDate DateTime @db.Date
  totalMinutes   Int      @default(0)
  totalSessions  Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation("UserListeningStreak", fields: [userId], references: [id], onDelete: Cascade)

  @@map("listening_streaks")
}

model Achievement {
  id               String            @id @default(dbgenerated("(gen_random_uuid())::text"))
  key              String            @unique
  name             String
  description      String
  icon             String
  category         String
  requirement      Int
  dynastyPoints    Int               @default(0)
  rarity           String            @default("COMMON")
  createdAt        DateTime          @default(now())
  slug             String?           @unique
  tier             AchievementTier   @default(BRONZE)
  title            String?
  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String      @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  progress      Int         @default(0)
  awardedAt     DateTime    @default(now())
  evidence      String?
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  user          User        @relation("UserAchievements", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([userId])
  @@index([awardedAt])
  @@map("user_achievements")
}

model SentenceHighlight {
  id            String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId        String
  bookId        String
  chapterNumber Int
  sentenceIndex Int
  sentenceText  String
  note          String?
  createdAt     DateTime @default(now())
  book          Book     @relation("BookSentenceHighlights", fields: [bookId], references: [id], onDelete: Cascade)
  user          User     @relation("UserSentenceHighlights", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId, chapterNumber, sentenceIndex], map: "sentence_highlights_userId_bookId_chapter_sentence_key")
  @@index([userId, bookId])
  @@map("sentence_highlights")
}

model ListeningAnalytics {
  id             String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId         String
  bookId         String
  sessionId      String
  startTime      DateTime
  endTime        DateTime?
  duration       Int       @default(0)
  speed          Float
  voiceId        String
  completionRate Float     @default(0)
  device         String?
  createdAt      DateTime  @default(now())
  book           Book      @relation("BookListeningAnalytics", fields: [bookId], references: [id], onDelete: Cascade)
  user           User      @relation("UserListeningAnalytics", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, startTime])
  @@index([bookId])
  @@map("listening_analytics")
}

model ReadingPresence {
  id         String   @id @default(cuid())
  userId     String
  bookId     String
  bookSlug   String
  page       Int
  socketId   String?
  lastSeenAt DateTime
  createdAt  DateTime @default(now())
  book       Book     @relation("BookReadingPresence", fields: [bookId], references: [id], onDelete: Cascade)
  user       User     @relation("UserReadingPresence", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
  @@index([bookId, page, lastSeenAt])
  @@index([lastSeenAt])
  @@map("reading_presence")
}

model PageReaction {
  id        String   @id @default(cuid())
  bookId    String
  bookSlug  String
  page      Int
  emote     String
  count     Int      @default(0)
  userIds   String[] @default([])
  updatedAt DateTime @updatedAt
  book      Book     @relation("BookPageReaction", fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([bookId, page, emote])
  @@index([bookId, page])
  @@map("page_reactions")
}

model CoReadingAnalytics {
  id                String   @id @default(cuid())
  bookId            String
  page              Int
  date              DateTime @db.Date
  peakConcurrent    Int      @default(0)
  avgConcurrent     Float    @default(0)
  totalMessages     Int      @default(0)
  totalReactions    Int      @default(0)
  uniqueUsers       Int      @default(0)
  avgTimeToFirstMsg Float?
  book              Book     @relation("BookCoReadingAnalytics", fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([bookId, page, date])
  @@index([bookId, date])
  @@map("co_reading_analytics")
}

model PageChat {
  id               String        @id
  bookId           String
  bookSlug         String
  page             Int
  userId           String
  message          String
  edited           Boolean       @default(false)
  editedAt         DateTime?
  createdAt        DateTime      @default(now())
  deletedBy        String?
  flagReason       String?
  flagged          Boolean       @default(false)
  flaggedAt        DateTime?
  flaggedBy        String?
  moderatorDeleted Boolean       @default(false)
  flags            MessageFlag[]
  book             Book          @relation("BookPageChat", fields: [bookId], references: [id], onDelete: Cascade)
  user             User          @relation("UserPageChat", fields: [userId], references: [id], onDelete: Cascade)

  @@index([bookId, page, createdAt])
  @@index([userId, createdAt])
  @@index([flagged])
  @@map("page_chats")
}

model MessageFlag {
  id        String   @id @default(cuid())
  messageId String
  flaggedBy String
  reason    String
  details   String?
  resolved  Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation("UserMessageFlags", fields: [flaggedBy], references: [id], onDelete: Cascade)
  message   PageChat @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([messageId, flaggedBy])
  @@index([resolved, createdAt])
  @@map("message_flags")
}

model ModerationLog {
  id          String   @id @default(cuid())
  action      String
  targetType  String
  targetId    String
  moderatorId String
  reason      String?
  details     String?
  createdAt   DateTime @default(now())
  moderator   User     @relation("ModeratorActions", fields: [moderatorId], references: [id], onDelete: Cascade)

  @@index([moderatorId, createdAt])
  @@index([targetId, createdAt])
  @@map("moderation_logs")
}

model UsernameRedirect {
  id        String   @id @default(cuid())
  from      String   @unique
  to        String
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([from])
  @@index([to])
  @@index([expiresAt])
  @@map("username_redirects")
}

model UserDailyStats {
  id             String   @id @default(cuid())
  userId         String
  date           DateTime @db.Date
  views          Int      @default(0)
  profileVisits  Int      @default(0)
  postLikes      Int      @default(0)
  comments       Int      @default(0)
  readingMinutes Int      @default(0)
  createdAt      DateTime @default(now())

  @@unique([userId, date])
  @@index([userId, date])
  @@map("user_daily_stats")
}

model ProfileVisit {
  id        String   @id @default(cuid())
  profileId String
  visitorId String?
  isUnique  Boolean  @default(true)
  userAgent String?
  ipHash    String?
  createdAt DateTime @default(now())

  @@index([profileId, createdAt])
  @@index([visitorId])
  @@index([ipHash, profileId, createdAt])
  @@map("profile_visits")
}

model DailyChallenge {
  id          String                  @id @default(cuid())
  key         String                  @unique
  name        String
  description String
  type        String
  target      Int
  difficulty  String
  xpReward    Int
  coinReward  Int                     @default(0)
  icon        String
  isActive    Boolean                 @default(true)
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  progress    UserChallengeProgress[]

  @@index([isActive])
  @@map("daily_challenges")
}

model UserChallengeProgress {
  id          String         @id @default(cuid())
  userId      String
  challengeId String
  date        DateTime       @db.Date
  progress    Int            @default(0)
  target      Int
  completed   Boolean        @default(false)
  claimedAt   DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  challenge   DailyChallenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@unique([userId, challengeId, date])
  @@index([userId, date])
  @@index([challengeId])
  @@map("user_challenge_progress")
}

model PowerUp {
  id           String        @id @default(cuid())
  key          String        @unique
  name         String
  description  String
  type         String
  multiplier   Float?
  duration     Int
  coinCost     Int
  rarity       String
  icon         String
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userPowerUps UserPowerUp[]

  @@index([isActive])
  @@map("power_ups")
}

model UserPowerUp {
  id          String   @id @default(cuid())
  userId      String
  powerUpId   String
  activatedAt DateTime @default(now())
  expiresAt   DateTime
  isActive    Boolean  @default(true)
  powerUp     PowerUp  @relation(fields: [powerUpId], references: [id], onDelete: Cascade)

  @@index([userId, isActive])
  @@index([expiresAt])
  @@map("user_power_ups")
}

model UserCoins {
  id        String   @id @default(cuid())
  userId    String   @unique
  balance   Int      @default(0)
  earned    Int      @default(0)
  spent     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("user_coins")
}

model ReadingBehavior {
  id                   String   @id @default(cuid())
  userId               String
  bookId               String
  chapterId            Int
  timestamp            DateTime @default(now())
  readingSpeed         Int
  pauseCount           Int
  pauseDuration        Int
  rereadCount          Int
  scrollbackCount      Int
  playbackSpeedChanges Int      @default(0)
  atmosphereChanges    Int      @default(0)
  bookmarksCreated     Int      @default(0)
  notesCreated         Int      @default(0)
  timeOfDay            String
  dayOfWeek            String
  sessionDuration      Int
  completed            Boolean
  completionPercentage Int

  @@index([userId])
  @@index([bookId])
  @@index([timestamp])
  @@map("reading_behaviors")
}

model UserBehaviorPattern {
  id                       String   @id @default(cuid())
  userId                   String   @unique
  peakFocusTimes           String[]
  bestDaysToRead           String[]
  averageSessionLength     Int
  preferredSpeed           Float
  pauseFrequency           String
  rereadFrequency          String
  highEngagementIndicators String[]
  lowEngagementIndicators  String[]
  likelyToCompleteBooks    Boolean
  averageCompletionRate    Float
  optimalChapterLength     Int
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  @@index([userId])
  @@map("user_behavior_patterns")
}

model ContentComplexity {
  id                     String   @id @default(cuid())
  bookId                 String
  chapterId              Int
  avgSentenceLength      Float
  vocabularyDensity      Float
  readingLevel           Float
  conceptDensity         String
  technicalTermsCount    Int
  abstractConceptsCount  Int
  recommendedSpeed       Float
  recommendedBreaks      Int
  estimatedCognitiveLoad String
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@unique([bookId, chapterId])
  @@index([bookId])
  @@map("content_complexity")
}

model course_enrollments {
  id                  String            @id
  userId              String
  courseId            String
  status              String?           @default("active")
  progress            Decimal?          @default(0) @db.Decimal(5, 2)
  completedLessons    Int?              @default(0)
  totalLessons        Int?              @default(0)
  currentLessonId     String?
  totalWatchTime      Int?              @default(0)
  lastAccessedAt      DateTime?         @db.Timestamp(6)
  completedAt         DateTime?         @db.Timestamp(6)
  certificateIssued   Boolean?          @default(false)
  certificateIssuedAt DateTime?         @db.Timestamp(6)
  certificateUrl      String?
  enrolledAt          DateTime          @default(now()) @db.Timestamp(6)
  updatedAt           DateTime          @default(now()) @db.Timestamp(6)
  courses             courses           @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_course_enrollments_course")
  users               User              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_course_enrollments_user")
  lesson_progress     lesson_progress[]

  @@unique([userId, courseId])
  @@index([courseId], map: "idx_course_enrollments_course")
  @@index([status], map: "idx_course_enrollments_status")
  @@index([userId], map: "idx_course_enrollments_user")
}

model course_lessons {
  id               String             @id
  sectionId        String
  courseId         String
  title            String
  slug             String
  description      String?
  order            Int
  type             String
  content          String?
  videoUrl         String?
  videoProvider    String?
  videoDuration    Int?
  videoThumbnail   String?
  pdfUrl           String?
  downloadUrl      String?
  fileSize         Int?
  isFree           Boolean?           @default(false)
  isLocked         Boolean?           @default(false)
  unlockAfter      String?
  transcript       String?
  hasTranscript    Boolean?           @default(false)
  viewCount        Int?               @default(0)
  completionCount  Int?               @default(0)
  averageWatchTime Int?               @default(0)
  createdAt        DateTime           @default(now()) @db.Timestamp(6)
  updatedAt        DateTime           @default(now()) @db.Timestamp(6)
  courses          courses            @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_course_lessons_course")
  course_sections  course_sections    @relation(fields: [sectionId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_course_lessons_section")
  course_notes     course_notes[]
  course_quizzes   course_quizzes[]
  course_resources course_resources[]
  lesson_progress  lesson_progress[]

  @@unique([courseId, slug])
  @@index([courseId], map: "idx_course_lessons_course")
  @@index([sectionId], map: "idx_course_lessons_section")
  @@index([type], map: "idx_course_lessons_type")
}

model course_notes {
  id             String          @id
  userId         String
  courseId       String
  lessonId       String?
  content        String
  timestamp      Int?
  isPublic       Boolean?        @default(false)
  createdAt      DateTime        @default(now()) @db.Timestamp(6)
  updatedAt      DateTime        @default(now()) @db.Timestamp(6)
  courses        courses         @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_course_notes_course")
  course_lessons course_lessons? @relation(fields: [lessonId], references: [id], onUpdate: NoAction, map: "fk_course_notes_lesson")
  users          User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_course_notes_user")

  @@index([courseId], map: "idx_course_notes_course")
  @@index([userId], map: "idx_course_notes_user")
}

model course_quizzes {
  id             String           @id
  lessonId       String?
  courseId       String
  title          String
  description    String?
  passingScore   Int?             @default(70)
  timeLimit      Int?
  maxAttempts    Int?
  showAnswers    Boolean?         @default(true)
  order          Int?             @default(0)
  createdAt      DateTime         @default(now()) @db.Timestamp(6)
  updatedAt      DateTime         @default(now()) @db.Timestamp(6)
  courses        courses          @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_course_quizzes_course")
  course_lessons course_lessons?  @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_course_quizzes_lesson")
  quiz_attempts  quiz_attempts[]
  quiz_questions quiz_questions[]
}

model course_resources {
  id             String          @id
  courseId       String
  lessonId       String?
  title          String
  type           String
  url            String
  fileSize       Int?
  downloadCount  Int?            @default(0)
  order          Int?            @default(0)
  createdAt      DateTime        @default(now()) @db.Timestamp(6)
  courses        courses         @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_course_resources_course")
  course_lessons course_lessons? @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_course_resources_lesson")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model course_reviews {
  id        String   @id
  userId    String
  courseId  String
  rating    Int
  comment   String?
  helpful   Int?     @default(0)
  verified  Boolean? @default(false)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
  courses   courses  @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_course_reviews_course")
  users     User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_course_reviews_user")

  @@unique([userId, courseId])
  @@index([courseId], map: "idx_course_reviews_course")
  @@index([userId], map: "idx_course_reviews_user")
}

model course_sections {
  id             String           @id
  courseId       String
  title          String
  description    String?
  order          Int
  isLocked       Boolean?         @default(false)
  createdAt      DateTime         @default(now()) @db.Timestamp(6)
  updatedAt      DateTime         @default(now()) @db.Timestamp(6)
  course_lessons course_lessons[]
  courses        courses          @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_course_sections_course")

  @@index([courseId], map: "idx_course_sections_course")
  @@index([order], map: "idx_course_sections_order")
}

model courses {
  id                  String               @id
  title               String
  slug                String               @unique
  description         String?
  shortDescription    String?
  coverImage          String?
  previewVideo        String?
  level               String               @default("beginner")
  category            String
  tags                String[]
  duration            Int?
  lessonCount         Int?                 @default(0)
  price               Decimal              @default(0) @db.Decimal(10, 2)
  currency            String?              @default("USD")
  isFree              Boolean?             @default(false)
  discount            Int?                 @default(0)
  status              String?              @default("draft")
  featured            Boolean?             @default(false)
  isPremium           Boolean?             @default(false)
  authorId            String
  instructorName      String?
  instructorBio       String?
  instructorImage     String?
  enrollmentCount     Int?                 @default(0)
  completionCount     Int?                 @default(0)
  averageRating       Decimal?             @default(0) @db.Decimal(3, 2)
  reviewCount         Int?                 @default(0)
  viewCount           Int?                 @default(0)
  metaTitle           String?
  metaDescription     String?
  ogImage             String?
  certificateEnabled  Boolean?             @default(false)
  certificateTemplate String?
  createdAt           DateTime             @default(now()) @db.Timestamp(6)
  updatedAt           DateTime             @default(now()) @db.Timestamp(6)
  publishedAt         DateTime?            @db.Timestamp(6)
  certificates        certificates[]
  course_enrollments  course_enrollments[]
  course_lessons      course_lessons[]
  course_notes        course_notes[]
  course_quizzes      course_quizzes[]
  course_resources    course_resources[]
  course_reviews      course_reviews[]
  course_sections     course_sections[]
  lesson_progress     lesson_progress[]

  @@index([authorId], map: "idx_courses_author")
  @@index([category], map: "idx_courses_category")
  @@index([featured], map: "idx_courses_featured")
  @@index([slug], map: "idx_courses_slug")
  @@index([status], map: "idx_courses_status")
}

model lesson_progress {
  id                 String             @id
  userId             String
  lessonId           String
  courseId           String
  enrollmentId       String
  status             String?            @default("not_started")
  progress           Decimal?           @default(0) @db.Decimal(5, 2)
  watchTime          Int?               @default(0)
  lastPosition       Int?               @default(0)
  completed          Boolean?           @default(false)
  completedAt        DateTime?          @db.Timestamp(6)
  notes              String?
  bookmarked         Boolean?           @default(false)
  createdAt          DateTime           @default(now()) @db.Timestamp(6)
  updatedAt          DateTime           @default(now()) @db.Timestamp(6)
  lastAccessedAt     DateTime?          @db.Timestamp(6)
  courses            courses            @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_lesson_progress_course")
  course_enrollments course_enrollments @relation(fields: [enrollmentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_lesson_progress_enrollment")
  course_lessons     course_lessons     @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_lesson_progress_lesson")
  users              User               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_lesson_progress_user")

  @@unique([userId, lessonId])
  @@index([enrollmentId], map: "idx_lesson_progress_enrollment")
  @@index([lessonId], map: "idx_lesson_progress_lesson")
  @@index([userId], map: "idx_lesson_progress_user")
}

model quiz_attempts {
  id             String         @id
  userId         String
  quizId         String
  score          Decimal?       @db.Decimal(5, 2)
  passed         Boolean?       @default(false)
  answers        Json?
  timeSpent      Int?
  startedAt      DateTime       @default(now()) @db.Timestamp(6)
  completedAt    DateTime?      @db.Timestamp(6)
  course_quizzes course_quizzes @relation(fields: [quizId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_quiz_attempts_quiz")
  users          User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_quiz_attempts_user")

  @@index([quizId], map: "idx_quiz_attempts_quiz")
  @@index([userId], map: "idx_quiz_attempts_user")
}

model quiz_questions {
  id             String         @id
  quizId         String
  question       String
  type           String
  options        Json?
  correctAnswer  String?
  explanation    String?
  points         Int?           @default(1)
  order          Int
  createdAt      DateTime       @default(now()) @db.Timestamp(6)
  course_quizzes course_quizzes @relation(fields: [quizId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_quiz_questions_quiz")
}

model certificates {
  id               String   @id
  userId           String
  courseId         String
  verificationCode String   @unique
  issuedAt         DateTime @default(now()) @db.Timestamp(6)
  pdfUrl           String?
  createdAt        DateTime @default(now()) @db.Timestamp(6)
  courses          courses  @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_certificates_course")
  users            User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_certificates_user")

  @@unique([userId, courseId])
  @@index([courseId], map: "idx_certificates_course")
  @@index([userId], map: "idx_certificates_user")
  @@index([verificationCode], map: "idx_certificates_verification")
}

enum Role {
  USER
  AUTHOR
  MODERATOR
  ADMIN
  PREMIUM
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  FAILED
  REFUNDED
}

enum NotificationType {
  COMMENT
  LIKE
  FOLLOW
  PURCHASE
  SYSTEM
  ACHIEVEMENT
  LEVEL_UP
  MENTION
  REPLY
}

enum FeedType {
  POST
  REFLECTION
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

enum AchievementTier {
  BRONZE
  SILVER
  GOLD
  ELITE
}

enum ReportType {
  POST
  USER
  COMMENT
}

enum ReportReason {
  SPAM
  HARASSMENT
  HATE_SPEECH
  VIOLENCE
  MISINFORMATION
  COPYRIGHT
  INAPPROPRIATE_CONTENT
  OTHER
}

enum ReportStatus {
  PENDING
  REVIEWING
  RESOLVED
  DISMISSED
}

// üéÆ‚öîÔ∏è DYNASTY DUELS - Knowledge Battle System

model Duel {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  startedAt     DateTime?
  completedAt   DateTime?
  
  // Players
  challengerId  String
  challenger    User        @relation("ChallengerDuels", fields: [challengerId], references: [id], onDelete: Cascade)
  opponentId    String
  opponent      User        @relation("OpponentDuels", fields: [opponentId], references: [id], onDelete: Cascade)
  
  // Book Context
  bookId        String
  book          Book        @relation(fields: [bookId], references: [id], onDelete: Cascade)
  chapterId     Int?
  chapterTitle  String?
  
  // Game Settings
  questionCount Int         @default(5)
  timeLimit     Int         @default(60) // seconds per question
  difficulty    String      @default("medium") // easy, medium, hard
  
  // Stakes & Betting
  xpBet         Int         @default(0)
  coinBet       Int         @default(0)
  
  // Results
  challengerScore  Int?
  opponentScore    Int?
  winnerId         String?
  winner           User?       @relation("WonDuels", fields: [winnerId], references: [id], onDelete: SetNull)
  
  // Status
  status        DuelStatus  @default(PENDING)
  
  // Relations
  questions     DuelQuestion[]
  
  @@index([challengerId])
  @@index([opponentId])
  @@index([bookId])
  @@index([status])
  @@index([createdAt])
  @@map("duels")
}

enum DuelStatus {
  PENDING    // Waiting for opponent to accept
  ACTIVE     // Battle in progress
  COMPLETED  // Finished
  DECLINED   // Opponent declined
  EXPIRED    // Timeout (no response within 24h)
  CANCELLED  // Cancelled by challenger
}

model DuelQuestion {
  id            String   @id @default(cuid())
  duelId        String
  duel          Duel     @relation(fields: [duelId], references: [id], onDelete: Cascade)
  
  // Question Content
  questionText  String   @db.Text
  options       Json     // ["Option A", "Option B", "Option C", "Option D"]
  correctAnswer Int      // 0, 1, 2, or 3 (array index)
  explanation   String   @db.Text
  
  // Metadata
  questionOrder Int      @default(0) // 1-5
  pageReference Int?
  difficulty    Float    @default(0.5) // 0-1 scale
  estimatedTime Int      @default(12) // seconds
  
  // Player Answers
  challengerAnswer   Int?     // 0-3 or null if no answer
  challengerTime     Int?     // milliseconds taken
  challengerCorrect  Boolean?
  
  opponentAnswer     Int?
  opponentTime       Int?
  opponentCorrect    Boolean?
  
  createdAt     DateTime @default(now())
  
  @@index([duelId])
  @@index([questionOrder])
  @@map("duel_questions")
}

model DuelStats {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation("UserDuelStats", fields: [userId], references: [id], onDelete: Cascade)
  
  // Overall Stats
  totalDuels      Int @default(0)
  wins            Int @default(0)
  losses          Int @default(0)
  draws           Int @default(0)
  
  // Streaks
  currentStreak   Int @default(0)
  longestStreak   Int @default(0)
  lastDuelAt      DateTime?
  
  // Rankings & Currency
  rank            Int?
  tier            DuelTier @default(BRONZE)
  xp              Int @default(0)
  coins           Int @default(500) // Starting coins
  
  // Performance Metrics
  perfectGames    Int @default(0) // All questions correct
  fastestWin      Int? // seconds
  highestScore    Int @default(0)
  totalXpEarned   Int @default(0)
  totalXpLost     Int @default(0)
  
  // By Book Stats (stored as JSON for flexibility)
  bookStats       Json? // { "book-id": { wins: 5, losses: 2, avgScore: 450 } }
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([rank])
  @@index([xp])
  @@index([tier])
  @@map("duel_stats")
}

enum DuelTier {
  BRONZE     // 0-999 XP
  SILVER     // 1,000-2,999 XP
  GOLD       // 3,000-5,999 XP
  PLATINUM   // 6,000-9,999 XP
  DIAMOND    // 10,000-19,999 XP
  MASTER     // 20,000-49,999 XP
  LEGEND     // 50,000+ XP
}

// ü§ñ ============================================
// DYNASTY NEXUS - AI INTELLIGENCE SYSTEM
// ============================================

// üí¨ AI Coach - Conversations
model AiConversation {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation("UserAiConversations", fields: [userId], references: [id], onDelete: Cascade)
  
  // Conversation Data
  messages    Json     @db.JsonB // Array of {role: "user"|"assistant", content: string, timestamp: DateTime}
  messageCount Int     @default(0)
  
  // Context Awareness
  context     Json?    @db.JsonB // {page: string, courseId?: string, lessonId?: string, bookId?: string}
  topic       String?  // Main topic extracted from conversation
  
  // Status & Quality
  status      AiConversationStatus @default(ACTIVE)
  resolved    Boolean  @default(false)
  sentiment   Float?   // -1 (negative) to 1 (positive)
  rating      Int?     // 1-5 stars (user feedback)
  feedback    String?  @db.Text
  
  // Analytics
  responseTime Float?  // Average AI response time in seconds
  tokensUsed   Int     @default(0)
  cost         Float   @default(0) // Cost in USD
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId])
  @@index([status])
  @@index([topic])
  @@index([createdAt])
  @@index([rating])
  @@map("ai_conversations")
}

enum AiConversationStatus {
  ACTIVE      // Ongoing conversation
  RESOLVED    // User's question answered
  ESCALATED   // Needs human support
  ABANDONED   // User left without resolution
}

// üìä AI Insights - Content Gap Analysis
model AiInsight {
  id          String   @id @default(cuid())
  
  // Insight Type
  type        AiInsightType
  category    String   // "course", "book", "lesson", "general"
  
  // Content
  content     String   @db.Text
  question    String?  @db.Text // Original user question if applicable
  
  // Relations
  relatedTo   String?  // courseId, bookId, lessonId
  relatedType String?  // "course", "book", "lesson"
  
  // Analytics
  frequency   Int      @default(1) // How many times this came up
  userCount   Int      @default(1) // How many unique users
  avgSentiment Float?  // Average sentiment of conversations about this
  
  // Resolution
  resolved    Boolean  @default(false)
  resolvedAt  DateTime?
  resolvedBy  String?  // Admin user ID
  resolution  String?  @db.Text // What action was taken
  
  // Priority
  priority    AiInsightPriority @default(MEDIUM)
  impact      String?  // Estimated impact of addressing this
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([type])
  @@index([category])
  @@index([relatedTo])
  @@index([resolved])
  @@index([priority])
  @@index([frequency])
  @@map("ai_insights")
}

enum AiInsightType {
  CONFUSION       // Users confused about a concept
  QUESTION        // Frequently asked question
  FEATURE_REQUEST // Users asking for a feature
  BUG_REPORT      // Users reporting an issue
  CONTENT_GAP     // Missing content identified
  IMPROVEMENT     // Suggestion for improvement
}

enum AiInsightPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// üéôÔ∏è COMMUNITY NARRATOR - PRODUCTION SYSTEM WITH MODERATION üöÄ
model CommunityNarration {
  id               String   @id @default(cuid())
  userId           String
  bookId           String
  pageNumber       Int
  
  // Text identification
  paragraphHash    String   // sha256 of normalized paragraph text
  paragraphText    String   @db.Text // Original paragraph for display
  language         String   @default("en")
  readingStyle     String?  // "neutral", "dramatic", "calm", etc.
  
  // Audio storage
  audioUrl         String   // Blob storage location
  waveformUrl      String?  // Optional visualization
  format           String   @default("webm-opus")
  durationSec      Float    // Duration in seconds
  sizeBytes        Int      // File size in bytes
  
  // Quality & validation
  transcript       String?  @db.Text // ASR-generated transcript
  asrConfidence    Float?   // 0-1, ASR confidence score
  wordErrorRate    Float?   // 0-1, WER vs canonical text
  qualityScore     Float?   // 0-1, SNR/silence/clipping composite
  
  // Moderation
  status           NarrationStatus @default(PENDING)
  moderationReason String?  @db.Text
  moderatedBy      String?  // Admin user ID
  moderatedAt      DateTime?
  
  // Licensing
  license          String   @default("DYN_COMMERCIAL")
  
  // Engagement
  playCount        Int      @default(0)
  likeCount        Int      @default(0)
  
  // Deduplication
  contentHash      String   // sha256(normalized text + language + readingStyle)
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  user             User               @relation("UserNarrations", fields: [userId], references: [id], onDelete: Cascade)
  book             Book               @relation("BookNarrations", fields: [bookId], references: [id], onDelete: Cascade)
  likes            NarrationLike[]    @relation("NarrationLikes")
  plays            NarrationPlay[]    @relation("NarrationPlays")
  flags            NarrationFlag[]    @relation("NarrationFlags")
  
  @@index([bookId, pageNumber])
  @@index([paragraphHash])
  @@index([likeCount, playCount])
  @@index([status])
  @@index([userId])
  @@map("community_narrations")
}

enum NarrationStatus {
  PENDING   // Awaiting moderation
  APPROVED  // Auto or manual approved
  REJECTED  // Failed moderation
}

model NarrationLike {
  id           String             @id @default(cuid())
  narrationId  String
  userId       String
  createdAt    DateTime           @default(now())
  
  narration    CommunityNarration @relation("NarrationLikes", fields: [narrationId], references: [id], onDelete: Cascade)
  user         User               @relation("UserNarrationLikes", fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([narrationId, userId])
  @@index([userId])
  @@map("narration_likes")
}

model NarrationPlay {
  id           String             @id @default(cuid())
  narrationId  String
  userId       String?            // Optional for anonymous
  ipHash       String             // hash(IP + UA + day) for fraud prevention
  day          DateTime           // Date only, for deduplication
  createdAt    DateTime           @default(now())
  
  narration    CommunityNarration @relation("NarrationPlays", fields: [narrationId], references: [id], onDelete: Cascade)
  user         User?              @relation("UserNarrationPlays", fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([narrationId, userId, ipHash, day])
  @@index([narrationId])
  @@index([day])
  @@map("narration_plays")
}

model NarrationFlag {
  id           String             @id @default(cuid())
  narrationId  String
  userId       String?            // Optional for anonymous reports
  reason       String             @db.Text
  createdAt    DateTime           @default(now())
  
  narration    CommunityNarration @relation("NarrationFlags", fields: [narrationId], references: [id], onDelete: Cascade)
  user         User?              @relation("UserNarrationFlags", fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([narrationId])
  @@map("narration_flags")
}

model BookPermission {
  id                        String   @id @default(cuid())
  bookId                    String   @unique
  allowCommunityNarrations  Boolean  @default(false)
  allowRevenueShare         Boolean  @default(false)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  
  book                      Book     @relation("BookPermissions", fields: [bookId], references: [id], onDelete: Cascade)
  
  @@map("book_permissions")
}

// ==================================
// üéØ MODULE 3: ENGAGEMENT DOMINATION SYSTEM (NEW MODELS ONLY)
// ==================================

// üìä Engagement Score & Drop-off Prediction
model EngagementScore {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation("UserEngagementScore", fields: [userId], references: [id], onDelete: Cascade)
  
  // AI-Predicted Risk Scores (0-100, higher = more at risk)
  dropOffRisk     Float    @default(0)
  weeklyRisk      Float    @default(0)
  monthlyRisk     Float    @default(0)
  
  // Engagement Metrics
  dailyActiveStreak    Int      @default(0)
  longestStreak        Int      @default(0)
  lastActiveAt         DateTime @default(now())
  avgSessionMinutes    Float    @default(0)
  avgLessonsPerWeek    Float    @default(0)
  completionVelocity   Float    @default(0)
  
  // Behavioral Signals
  signals         Json     @db.JsonB
  
  // Intervention Tracking
  interventions   Json     @db.JsonB
  lastIntervention DateTime?
  interventionCount Int     @default(0)
  
  // Effectiveness
  retained        Boolean?
  retainedAt      DateTime?
  
  lastCalculated  DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([dropOffRisk])
  @@index([weeklyRisk])
  @@index([lastActiveAt])
  @@map("engagement_scores")
}

//  Daily Streak Tracking
model Streak {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation("UserStreak", fields: [userId], references: [id], onDelete: Cascade)
  
  currentStreak   Int      @default(0)
  longestStreak   Int      @default(0)
  
  lastActivityDate DateTime?
  streakStartDate  DateTime?
  
  freezesAvailable Int      @default(0)
  freezesUsed      Int      @default(0)
  
  milestones      Json     @db.JsonB
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([currentStreak])
  @@map("streaks")
}

// üéØ Personalization Profile
model PersonalizationProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation("UserPersonalization", fields: [userId], references: [id], onDelete: Cascade)
  
  // Learning Preferences
  learningStyle       String?
  preferredPace       String   @default("MODERATE")
  preferredDifficulty String   @default("MEDIUM")
  preferredFormat     String   @default("MIXED")
  
  // Optimal Times
  optimalStudyTime    Json?    @db.JsonB
  preferredDuration   Int?
  
  // Content Preferences
  topicPreferences    Json?    @db.JsonB
  avoidedTopics       String[]
  
  // Engagement Triggers
  motivators          Json?    @db.JsonB
  
  adaptiveMode        Boolean  @default(true)
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  @@map("personalization_profiles")
}

// üìà Behavior Tracking Events
model BehaviorEvent {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation("UserBehaviorEvents", fields: [userId], references: [id], onDelete: Cascade)
  
  eventType   String
  eventData   Json     @db.JsonB
  
  sessionId   String?
  pageUrl     String?
  referrer    String?
  userAgent   String?
  platform    String?
  
  timestamp   DateTime @default(now())
  
  @@index([userId, timestamp])
  @@index([eventType, timestamp])
  @@map("behavior_events")
}

// üéØ Intervention Templates - Customizable Message Templates
model InterventionTemplate {
  id              String   @id @default(cuid())
  name            String
  type            String   // gentle_reminder, streak_warning, achievement_unlocked, etc.
  subject         String
  body            String   @db.Text
  cta             String   // Call to action text
  ctaUrl          String   // URL for the CTA button
  channel         String   // EMAIL, PUSH, IN_APP
  isActive        Boolean  @default(true)
  
  // AI Enhancement
  useAiPersonalization Boolean @default(false)
  aiPrompt        String?  @db.Text
  
  // A/B Testing
  variants        InterventionVariant[]
  
  // Usage Stats
  timesSent       Int      @default(0)
  timesOpened     Int      @default(0)
  timesClicked    Int      @default(0)
  timesConverted  Int      @default(0)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([type, channel])
  @@map("intervention_templates")
}

// üß™ A/B Testing Variants
model InterventionVariant {
  id              String   @id @default(cuid())
  templateId      String
  template        InterventionTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  name            String
  subject         String
  body            String   @db.Text
  cta             String
  
  // Performance Tracking
  timesSent       Int      @default(0)
  timesOpened     Int      @default(0)
  timesClicked    Int      @default(0)
  timesConverted  Int      @default(0)
  
  isWinner        Boolean  @default(false)
  
  createdAt       DateTime @default(now())
  
  @@map("intervention_variants")
}

// üìä Intervention Tracking - Real Analytics
model InterventionTracking {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation("UserInterventions", fields: [userId], references: [id], onDelete: Cascade)
  
  templateId      String?
  variantId       String?
  
  channel         String    // EMAIL, PUSH, IN_APP
  type            String    // gentle_reminder, streak_warning, etc.
  
  subject         String?
  body            String?   @db.Text
  
  // Tracking Events
  sentAt          DateTime  @default(now())
  deliveredAt     DateTime?
  openedAt        DateTime?
  clickedAt       DateTime?
  convertedAt     DateTime?
  
  // Email Specific
  emailId         String?   // SendGrid message ID
  trackingPixel   String?   @unique
  
  // Conversion Tracking
  conversionGoal  String?   // e.g., "completed_lesson", "returned_to_platform"
  conversionValue Float?
  
  // Metadata
  metadata        Json?     @db.JsonB
  
  @@index([userId, sentAt])
  @@index([channel, sentAt])
  @@index([templateId, sentAt])
  @@index([trackingPixel])
  @@map("intervention_tracking")
}

// üìÖ Scheduled Campaigns - Automation Paradise
model ScheduledCampaign {
  id              String    @id @default(cuid())
  name            String
  description     String?   @db.Text
  
  templateId      String?
  
  // Targeting
  targetAudience  String    // all_users, at_risk, inactive_7d, inactive_30d, custom
  customFilter    Json?     @db.JsonB
  
  // Scheduling
  scheduleType    String    // one_time, recurring, drip
  scheduledAt     DateTime?
  recurringPattern String?  // daily, weekly, monthly
  recurringDays   Int[]     @default([]) // [1,3,5] for Mon, Wed, Fri
  recurringTime   String?   // "09:00"
  
  // Drip Campaign
  isDripCampaign  Boolean   @default(false)
  dripDays        Int[]     @default([]) // [1,3,7,14] - days after signup
  
  // Status
  status          String    @default("draft") // draft, active, paused, completed
  isActive        Boolean   @default(false)
  
  // Performance
  totalSent       Int       @default(0)
  totalOpened     Int       @default(0)
  totalClicked    Int       @default(0)
  totalConverted  Int       @default(0)
  
  lastRunAt       DateTime?
  nextRunAt       DateTime?
  
  createdBy       String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([status, isActive])
  @@index([nextRunAt])
  @@map("scheduled_campaigns")
}

// üé® Campaign Executions - Track Each Run
model CampaignExecution {
  id              String    @id @default(cuid())
  campaignId      String
  
  status          String    // pending, running, completed, failed
  
  targetedUsers   Int       @default(0)
  sentCount       Int       @default(0)
  failedCount     Int       @default(0)
  
  startedAt       DateTime  @default(now())
  completedAt     DateTime?
  
  error           String?   @db.Text
  logs            Json?     @db.JsonB
  
  @@index([campaignId, startedAt])
  @@map("campaign_executions")
}

// üí∞üí∞üí∞ MODULE 4: REVENUE MAXIMIZER üí∞üí∞üí∞

// üíµ Dynamic Pricing Rules
model PricingRule {
  id              String    @id @default(cuid())
  productId       String
  productType     String    // "course", "book", "bundle", "subscription"
  
  // Pricing
  basePrice       Float
  currentPrice    Float
  minPrice        Float?    // Safety floor
  maxPrice        Float?    // Safety ceiling
  
  // Rules engine (JSON array of conditions)
  rules           Json      @db.JsonB // [{condition, multiplier, priority, active}]
  
  // Performance tracking
  active          Boolean   @default(true)
  performance     Json?     @db.JsonB // {pricePoint: {impressions, conversions, revenue}}
  
  lastUpdated     DateTime  @updatedAt
  createdAt       DateTime  @default(now())
  
  @@index([productId, active])
  @@index([productType])
  @@map("pricing_rules")
}

// üìä Price Testing - A/B test different price points
model PriceTest {
  id              String    @id @default(cuid())
  productId       String
  productType     String
  
  pricePoint      Float
  
  // Metrics
  impressions     Int       @default(0)
  conversions     Int       @default(0)
  revenue         Float     @default(0)
  conversionRate  Float?
  avgOrderValue   Float?
  
  // Test window
  startDate       DateTime  @default(now())
  endDate         DateTime?
  isActive        Boolean   @default(true)
  
  // Winner determination
  isWinner        Boolean   @default(false)
  confidence      Float?    // Statistical confidence level
  
  @@index([productId, isActive])
  @@index([startDate])
  @@map("price_tests")
}

// üéØ Smart Upsell Rules
model UpsellRule {
  id              String    @id @default(cuid())
  name            String
  description     String?   @db.Text
  
  // Trigger configuration
  triggerType     String    // "cart", "checkout", "post-purchase", "mid-course", "browse"
  triggerCondition Json     @db.JsonB // When to show {productId, userSegment, timeOfDay, etc}
  
  // Offer details
  offerType       String    // "upgrade", "bundle", "complementary", "next-level"
  offerProductId  String
  offerDiscount   Float?    // Percentage or fixed amount
  offerMessage    String?   @db.Text
  
  // Display configuration
  priority        Int       @default(0)
  active          Boolean   @default(true)
  
  // Performance tracking
  impressions     Int       @default(0)
  clicks          Int       @default(0)
  conversions     Int       @default(0)
  revenue         Float     @default(0)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([triggerType, active])
  @@index([priority])
  @@map("upsell_rules")
}

// üìà Upsell Events - Track each upsell interaction
model UpsellEvent {
  id              String    @id @default(cuid())
  userId          String
  ruleId          String
  
  // Context
  triggerContext  Json      @db.JsonB // What triggered it
  
  // Interaction tracking
  shown           Boolean   @default(false)
  shownAt         DateTime?
  clicked         Boolean   @default(false)
  clickedAt       DateTime?
  converted       Boolean   @default(false)
  convertedAt     DateTime?
  
  // Financial impact
  revenue         Float?
  
  timestamp       DateTime  @default(now())
  
  @@index([userId])
  @@index([ruleId])
  @@index([timestamp])
  @@map("upsell_events")
}

// üõ°Ô∏è Churn Risk Scoring
model ChurnRisk {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation("UserChurnRisk", fields: [userId], references: [id], onDelete: Cascade)
  
  // Risk assessment
  riskScore       Float     // 0-100
  riskLevel       String    // "low", "medium", "high", "critical"
  
  // Contributing factors (JSON object with scores)
  factors         Json      @db.JsonB // {loginFrequency: 20, sessionDuration: 35, completion: 45, etc}
  
  // Predictions
  churnProbability Float    // 0-1
  daysUntilChurn   Int?     // Estimated days until churn
  
  // Interventions
  interventionsSent Int     @default(0)
  lastIntervention  DateTime?
  interventionHistory Json[] @db.JsonB // [{type, date, result, retained}]
  
  // Outcome tracking
  retained        Boolean?
  retainedAt      DateTime?
  churnedAt       DateTime?
  churnReason     String?
  
  calculatedAt    DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([riskScore])
  @@index([riskLevel])
  @@index([calculatedAt])
  @@map("churn_risks")
}

// üéÅ Win-Back Offers
model WinBackOffer {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation("UserWinBackOffers", fields: [userId], references: [id], onDelete: Cascade)
  
  // Offer configuration
  offerType       String    // "discount", "feature_unlock", "personal_call", "free_month"
  discountPercent Float?
  discountAmount  Float?
  features        Json?     @db.JsonB // What features to unlock
  message         String?   @db.Text
  
  // Timing
  expiresAt       DateTime
  
  // Tracking
  sent            Boolean   @default(false)
  sentAt          DateTime?
  opened          Boolean   @default(false)
  openedAt        DateTime?
  clicked         Boolean   @default(false)
  clickedAt       DateTime?
  redeemed        Boolean   @default(false)
  redeemedAt      DateTime?
  
  // Value
  estimatedValue  Float?    // How much we expect to save
  actualValue     Float?    // Actual LTV retained
  
  createdAt       DateTime  @default(now())
  
  @@index([userId])
  @@index([expiresAt])
  @@index([redeemed])
  @@map("win_back_offers")
}

// üíé User Lifetime Value Predictions
model UserLTV {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation("UserLTV", fields: [userId], references: [id], onDelete: Cascade)
  
  // Predictions
  predictedLTV    Float
  confidence      Float     // 0-1 (how confident we are)
  segment         String    // "whale", "high-value", "medium", "low", "at-risk"
  
  // Probabilities
  upgradeProb     Float     // 0-1 (will they upgrade?)
  churnProb       Float     // 0-1 (will they leave?)
  referralProb    Float     // 0-1 (will they refer others?)
  
  // Actual tracking
  actualLTV       Float     @default(0)
  totalSpent      Float     @default(0)
  totalPurchases  Int       @default(0)
  totalReferrals  Int       @default(0)
  referralValue   Float     @default(0)
  
  // Time-based metrics
  monthsSinceSignup Int
  monthsSinceLastPurchase Int?
  avgMonthlySpend Float?
  
  // Model metadata
  modelVersion    String?   // Which ML model version
  features        Json?     @db.JsonB // Features used for prediction
  
  calculatedAt    DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([segment])
  @@index([predictedLTV])
  @@index([churnProb])
  @@map("user_ltv")
}

// üéä Referral Campaigns
model ReferralCampaign {
  id              String    @id @default(cuid())
  name            String
  description     String?   @db.Text
  
  // Incentive structure
  referrerReward  Float     // What referrer gets
  referredReward  Float     // What new user gets
  rewardType      String    // "percent", "fixed", "credit", "free_month"
  
  // Targeting
  targetSegment   String?   // Which users can participate
  minLTV          Float?    // Only users with LTV above this
  maxReferrals    Int?      // Limit per user
  
  // Viral mechanics
  requirePurchase Boolean   @default(false) // Does referred user need to purchase?
  tierBonuses     Json?     @db.JsonB // {3: 100, 5: 250, 10: 500} - bonuses at milestones
  
  // Performance tracking
  impressions     Int       @default(0)
  shares          Int       @default(0)
  clicks          Int       @default(0)
  conversions     Int       @default(0)
  revenue         Float     @default(0)
  cost            Float     @default(0)
  viralCoef       Float?    // K-factor (how many people does each user bring)
  
  // Status
  active          Boolean   @default(true)
  startDate       DateTime  @default(now())
  endDate         DateTime?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([active])
  @@index([startDate])
  @@map("referral_campaigns")
}

// üìäüìäüìä MODULE 5: ANALYTICS BRAIN üìäüìäüìä

// üìà Analytics Events - Track everything
model AnalyticsEvent {
  id          String   @id @default(cuid())
  userId      String?
  sessionId   String?
  event       String   // "page_view", "button_click", "purchase", "signup", etc
  category    String?  // "engagement", "revenue", "content", etc
  properties  Json     @db.JsonB // Event-specific data
  page        String?  // Current page URL
  referrer    String?  // Where they came from
  userAgent   String?  // Browser info
  timestamp   DateTime @default(now())
  
  @@index([userId])
  @@index([sessionId])
  @@index([event])
  @@index([category])
  @@index([timestamp])
  @@map("analytics_events")
}

// üìä Metrics - Track key business metrics over time
model Metric {
  id         String   @id @default(cuid())
  name       String   // "dau", "mau", "mrr", "churn_rate", etc
  value      Float
  target     Float?   // Goal value
  change     Float?   // % change from last period
  period     String   // "hourly", "daily", "weekly", "monthly"
  date       DateTime @default(now())
  metadata   Json?    @db.JsonB // Additional context
  
  @@unique([name, period, date])
  @@index([name])
  @@index([period])
  @@index([date])
  @@map("metrics")
}

// üß™ A/B Tests - Experiment framework
model ABTest {
  id            String   @id @default(cuid())
  name          String
  description   String?  @db.Text
  hypothesis    String?  @db.Text
  
  // Variants
  variants      Json     @db.JsonB // [{id, name, config, allocation%}]
  allocation    Json     @db.JsonB // {variant_id: percentage}
  
  // What to measure
  metrics       String[] // ["conversion", "revenue", "engagement"]
  primaryMetric String   // Main metric to optimize
  
  // Test configuration
  trafficAllocation Float @default(1.0) // % of users to include (0-1)
  
  // Status
  status        String   @default("draft") // "draft", "running", "paused", "completed"
  startDate     DateTime?
  endDate       DateTime?
  
  // Results
  results       Json?    @db.JsonB // Final statistical results
  winner        String?  // Winning variant ID
  confidence    Float?   // Statistical confidence (0-1)
  
  // Metadata
  createdBy     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  assignments   ABTestAssignment[]
  
  @@index([status])
  @@index([startDate])
  @@map("ab_tests")
}

// üéØ A/B Test Assignments - Which user saw which variant
model ABTestAssignment {
  id         String   @id @default(cuid())
  testId     String
  test       ABTest   @relation(fields: [testId], references: [id], onDelete: Cascade)
  userId     String
  variant    String   // Variant ID
  assignedAt DateTime @default(now())
  
  // Tracking
  converted  Boolean  @default(false)
  convertedAt DateTime?
  value      Float?   // Conversion value (revenue, etc)
  
  @@unique([testId, userId])
  @@index([testId])
  @@index([userId])
  @@index([variant])
  @@map("ab_test_assignments")
}

// üìâ Funnels - Track conversion paths
model Funnel {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  
  // Steps in the funnel
  steps       Json     @db.JsonB // [{step: 1, name: "Landing", event: "page_view"}]
  
  // Configuration
  timeWindow  Int      @default(86400) // Max time between steps (seconds)
  active      Boolean  @default(true)
  
  // Relations
  events      FunnelEvent[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([active])
  @@map("funnels")
}

// üìä Funnel Events - Track user progress through funnels
model FunnelEvent {
  id         String   @id @default(cuid())
  funnelId   String
  funnel     Funnel   @relation(fields: [funnelId], references: [id], onDelete: Cascade)
  userId     String
  sessionId  String
  step       Int      // Which step (1, 2, 3, etc)
  completed  Boolean  @default(false)
  timestamp  DateTime @default(now())
  
  @@index([funnelId, userId])
  @@index([sessionId])
  @@index([timestamp])
  @@map("funnel_events")
}

// üìÖ Cohorts - Group users by signup date for retention analysis
model Cohort {
  id            String   @id @default(cuid())
  name          String
  startDate     DateTime
  endDate       DateTime
  
  // Stats
  totalUsers    Int      @default(0)
  activeUsers   Int      @default(0)
  
  // Retention rates by period
  retentionData Json     @db.JsonB // {week1: 0.85, week2: 0.72, week4: 0.65}
  
  calculatedAt  DateTime @default(now())
  
  @@index([startDate])
  @@map("cohorts")
}

// üìà Predictions - Store ML predictions for future reference
model Prediction {
  id           String   @id @default(cuid())
  type         String   // "revenue", "churn", "ltv", "demand"
  target       String?  // What we're predicting (userId, productId, etc)
  
  // Prediction details
  value        Float    // Predicted value
  confidence   Float    // Confidence level (0-1)
  horizon      Int      // Days into future
  
  // Features used
  features     Json     @db.JsonB
  modelVersion String?  // Which ML model
  
  // Actual outcome (for accuracy tracking)
  actualValue  Float?
  accuracy     Float?   // How close was prediction
  
  predictedAt  DateTime @default(now())
  actualizedAt DateTime? // When actual value became known
  
  @@index([type])
  @@index([target])
  @@index([predictedAt])
  @@map("predictions")
}

// üìä Dashboard Snapshots - Save dashboard state for reports
model DashboardSnapshot {
  id          String   @id @default(cuid())
  name        String
  type        String   // "executive", "revenue", "engagement", "custom"
  
  // Data snapshot
  data        Json     @db.JsonB // All metrics at this point in time
  
  // Metadata
  period      String   // "daily", "weekly", "monthly"
  createdBy   String?
  createdAt   DateTime @default(now())
  
  @@index([type])
  @@index([period])
  @@index([createdAt])
  @@map("dashboard_snapshots")
}

// üîî Alerts - Automated alerts for metric thresholds
model Alert {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  
  // Alert configuration
  metric      String   // Which metric to monitor
  condition   String   // "greater_than", "less_than", "equals", "change_percent"
  threshold   Float    // Trigger value
  
  // Notification settings
  channels    String[] // ["email", "slack", "sms"]
  recipients  String[] // User IDs or email addresses
  
  // Status
  active      Boolean  @default(true)
  lastTriggered DateTime?
  triggerCount Int     @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([metric])
  @@index([active])
  @@map("alerts")
}
